"use strict";(self.webpackChunkfront_lib_mui_turborepo=self.webpackChunkfront_lib_mui_turborepo||[]).push([[17],{"./node_modules/react-map-gl/dist/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Jx:()=>marker,GI:()=>popup,ZP:()=>map});var react=__webpack_require__("./node_modules/react/index.js");const MountedMapsContext=react.createContext(null);function transformToViewState(tr){return{longitude:tr.center.lng,latitude:tr.center.lat,zoom:tr.zoom,pitch:tr.pitch,bearing:tr.bearing,padding:tr.padding}}function applyViewStateToTransform(tr,props){const v=props.viewState||props;let changed=!1;if("longitude"in v&&"latitude"in v){const center=tr.center;tr.center=new center.constructor(v.longitude,v.latitude),changed=changed||center!==tr.center}if("zoom"in v){const zoom=tr.zoom;tr.zoom=v.zoom,changed=changed||zoom!==tr.zoom}if("bearing"in v){const bearing=tr.bearing;tr.bearing=v.bearing,changed=changed||bearing!==tr.bearing}if("pitch"in v){const pitch=tr.pitch;tr.pitch=v.pitch,changed=changed||pitch!==tr.pitch}return v.padding&&!tr.isPaddingEqual(v.padding)&&(changed=!0,tr.padding=v.padding),changed}const refProps=["type","source","source-layer","minzoom","maxzoom","filter","layout"];function normalizeStyle(style){if(!style)return null;if("string"==typeof style)return style;if("toJS"in style&&(style=style.toJS()),!style.layers)return style;const layerIndex={};for(const layer of style.layers)layerIndex[layer.id]=layer;const layers=style.layers.map((layer=>{const layerRef=layerIndex[layer.ref];let normalizedLayer=null;if("interactive"in layer&&(normalizedLayer={...layer},delete normalizedLayer.interactive),layerRef){normalizedLayer=normalizedLayer||{...layer},delete normalizedLayer.ref;for(const propName of refProps)propName in layerRef&&(normalizedLayer[propName]=layerRef[propName])}return normalizedLayer||layer}));return{...style,layers}}function deep_equal_deepEqual(a,b){if(a===b)return!0;if(!a||!b)return!1;if(Array.isArray(a)){if(!Array.isArray(b)||a.length!==b.length)return!1;for(let i=0;i<a.length;i++)if(!deep_equal_deepEqual(a[i],b[i]))return!1;return!0}if(Array.isArray(b))return!1;if("object"==typeof a&&"object"==typeof b){const aKeys=Object.keys(a),bKeys=Object.keys(b);if(aKeys.length!==bKeys.length)return!1;for(const key of aKeys){if(!b.hasOwnProperty(key))return!1;if(!deep_equal_deepEqual(a[key],b[key]))return!1}return!0}return!1}var process=__webpack_require__("./node_modules/process/browser.js");const pointerEvents={mousedown:"onMouseDown",mouseup:"onMouseUp",mouseover:"onMouseOver",mousemove:"onMouseMove",click:"onClick",dblclick:"onDblClick",mouseenter:"onMouseEnter",mouseleave:"onMouseLeave",mouseout:"onMouseOut",contextmenu:"onContextMenu",touchstart:"onTouchStart",touchend:"onTouchEnd",touchmove:"onTouchMove",touchcancel:"onTouchCancel"},cameraEvents={movestart:"onMoveStart",move:"onMove",moveend:"onMoveEnd",dragstart:"onDragStart",drag:"onDrag",dragend:"onDragEnd",zoomstart:"onZoomStart",zoom:"onZoom",zoomend:"onZoomEnd",rotatestart:"onRotateStart",rotate:"onRotate",rotateend:"onRotateEnd",pitchstart:"onPitchStart",pitch:"onPitch",pitchend:"onPitchEnd"},otherEvents={wheel:"onWheel",boxzoomstart:"onBoxZoomStart",boxzoomend:"onBoxZoomEnd",boxzoomcancel:"onBoxZoomCancel",resize:"onResize",load:"onLoad",render:"onRender",idle:"onIdle",remove:"onRemove",data:"onData",styledata:"onStyleData",sourcedata:"onSourceData",error:"onError"},settingNames=["minZoom","maxZoom","minPitch","maxPitch","maxBounds","projection","renderWorldCopies"],handlerNames=["scrollZoom","boxZoom","dragRotate","dragPan","keyboard","doubleClickZoom","touchZoomRotate","touchPitch"];class Mapbox{constructor(MapClass,props,container){this._map=null,this._internalUpdate=!1,this._inRender=!1,this._hoveredFeatures=null,this._deferredEvents={move:!1,zoom:!1,pitch:!1,rotate:!1},this._onEvent=e=>{const cb=this.props[otherEvents[e.type]];cb&&cb(e)},this._onPointerEvent=e=>{"mousemove"!==e.type&&"mouseout"!==e.type||this._updateHover(e);const cb=this.props[pointerEvents[e.type]];cb&&(this.props.interactiveLayerIds&&"mouseover"!==e.type&&"mouseout"!==e.type&&(e.features=this._hoveredFeatures||this._queryRenderedFeatures(e.point)),cb(e),delete e.features)},this._onCameraEvent=e=>{if(!this._internalUpdate){const cb=this.props[cameraEvents[e.type]];cb&&cb(e)}e.type in this._deferredEvents&&(this._deferredEvents[e.type]=!1)},this._MapClass=MapClass,this.props=props,this._initialize(container)}get map(){return this._map}get transform(){return this._renderTransform}setProps(props){const oldProps=this.props;this.props=props;const settingsChanged=this._updateSettings(props,oldProps);settingsChanged&&this._createShadowTransform(this._map);const sizeChanged=this._updateSize(props),viewStateChanged=this._updateViewState(props,!0);this._updateStyle(props,oldProps),this._updateStyleComponents(props,oldProps),this._updateHandlers(props,oldProps),(settingsChanged||sizeChanged||viewStateChanged&&!this._map.isMoving())&&this.redraw()}static reuse(props,container){const that=Mapbox.savedMaps.pop();if(!that)return null;const map=that.map,oldContainer=map.getContainer();for(container.className=oldContainer.className;oldContainer.childNodes.length>0;)container.appendChild(oldContainer.childNodes[0]);map._container=container;const resizeObserver=map._resizeObserver;resizeObserver&&(resizeObserver.disconnect(),resizeObserver.observe(container)),that.setProps({...props,styleDiffing:!1}),map.resize();const{initialViewState}=props;return initialViewState&&(initialViewState.bounds?map.fitBounds(initialViewState.bounds,{...initialViewState.fitBoundsOptions,duration:0}):that._updateViewState(initialViewState,!1)),map.isStyleLoaded()?map.fire("load"):map.once("styledata",(()=>map.fire("load"))),map._update(),that}_initialize(container){const{props}=this,mapOptions={...props,...props.initialViewState,accessToken:props.mapboxAccessToken||getAccessTokenFromEnv()||null,container,style:normalizeStyle(props.mapStyle)},viewState=mapOptions.initialViewState||mapOptions.viewState||mapOptions;if(Object.assign(mapOptions,{center:[viewState.longitude||0,viewState.latitude||0],zoom:viewState.zoom||0,pitch:viewState.pitch||0,bearing:viewState.bearing||0}),props.gl){const getContext=HTMLCanvasElement.prototype.getContext;HTMLCanvasElement.prototype.getContext=()=>(HTMLCanvasElement.prototype.getContext=getContext,props.gl)}const map=new this._MapClass(mapOptions);viewState.padding&&map.setPadding(viewState.padding),props.cursor&&(map.getCanvas().style.cursor=props.cursor),this._createShadowTransform(map);const renderMap=map._render;map._render=arg=>{this._inRender=!0,renderMap.call(map,arg),this._inRender=!1};const runRenderTaskQueue=map._renderTaskQueue.run;map._renderTaskQueue.run=arg=>{runRenderTaskQueue.call(map._renderTaskQueue,arg),this._onBeforeRepaint()},map.on("render",(()=>this._onAfterRepaint()));const fireEvent=map.fire;map.fire=this._fireEvent.bind(this,fireEvent),map.on("resize",(()=>{this._renderTransform.resize(map.transform.width,map.transform.height)})),map.on("styledata",(()=>this._updateStyleComponents(this.props,{}))),map.on("sourcedata",(()=>this._updateStyleComponents(this.props,{})));for(const eventName in pointerEvents)map.on(eventName,this._onPointerEvent);for(const eventName in cameraEvents)map.on(eventName,this._onCameraEvent);for(const eventName in otherEvents)map.on(eventName,this._onEvent);this._map=map}recycle(){const children=this.map.getContainer().querySelector("[mapboxgl-children]");null==children||children.remove(),Mapbox.savedMaps.push(this)}destroy(){this._map.remove()}redraw(){const map=this._map;!this._inRender&&map.style&&(map._frame&&(map._frame.cancel(),map._frame=null),map._render())}_createShadowTransform(map){const renderTransform=function cloneTransform(tr){const newTransform=tr.clone();return newTransform.pixelsToGLUnits=tr.pixelsToGLUnits,newTransform}(map.transform);map.painter.transform=renderTransform,this._renderTransform=renderTransform}_updateSize(nextProps){const{viewState}=nextProps;if(viewState){const map=this._map;if(viewState.width!==map.transform.width||viewState.height!==map.transform.height)return map.resize(),!0}return!1}_updateViewState(nextProps,triggerEvents){if(this._internalUpdate)return!1;const map=this._map,tr=this._renderTransform,{zoom,pitch,bearing}=tr,isMoving=map.isMoving();isMoving&&(tr.cameraElevationReference="sea");const changed=applyViewStateToTransform(tr,{...transformToViewState(map.transform),...nextProps});if(isMoving&&(tr.cameraElevationReference="ground"),changed&&triggerEvents){const deferredEvents=this._deferredEvents;deferredEvents.move=!0,deferredEvents.zoom||(deferredEvents.zoom=zoom!==tr.zoom),deferredEvents.rotate||(deferredEvents.rotate=bearing!==tr.bearing),deferredEvents.pitch||(deferredEvents.pitch=pitch!==tr.pitch)}return isMoving||applyViewStateToTransform(map.transform,nextProps),changed}_updateSettings(nextProps,currProps){const map=this._map;let changed=!1;for(const propName of settingNames)propName in nextProps&&!deep_equal_deepEqual(nextProps[propName],currProps[propName])&&(changed=!0,map[`set${propName[0].toUpperCase()}${propName.slice(1)}`](nextProps[propName]));return changed}_updateStyle(nextProps,currProps){if(nextProps.cursor!==currProps.cursor&&(this._map.getCanvas().style.cursor=nextProps.cursor),nextProps.mapStyle!==currProps.mapStyle){const options={diff:nextProps.styleDiffing};return"localIdeographFontFamily"in nextProps&&(options.localIdeographFontFamily=nextProps.localIdeographFontFamily),this._map.setStyle(normalizeStyle(nextProps.mapStyle),options),!0}return!1}_updateStyleComponents(nextProps,currProps){const map=this._map;let changed=!1;return map.style.loaded()&&("light"in nextProps&&!deep_equal_deepEqual(nextProps.light,currProps.light)&&(changed=!0,map.setLight(nextProps.light)),"fog"in nextProps&&!deep_equal_deepEqual(nextProps.fog,currProps.fog)&&(changed=!0,map.setFog(nextProps.fog)),"terrain"in nextProps&&!deep_equal_deepEqual(nextProps.terrain,currProps.terrain)&&(nextProps.terrain&&!map.getSource(nextProps.terrain.source)||(changed=!0,map.setTerrain(nextProps.terrain)))),changed}_updateHandlers(nextProps,currProps){const map=this._map;let changed=!1;for(const propName of handlerNames){const newValue=nextProps[propName];deep_equal_deepEqual(newValue,currProps[propName])||(changed=!0,newValue?map[propName].enable(newValue):map[propName].disable())}return changed}_queryRenderedFeatures(point){const map=this._map,{interactiveLayerIds=[]}=this.props;try{return map.queryRenderedFeatures(point,{layers:interactiveLayerIds.filter(map.getLayer.bind(map))})}catch(_a){return[]}}_updateHover(e){var _a;const{props}=this;if(props.interactiveLayerIds&&(props.onMouseMove||props.onMouseEnter||props.onMouseLeave)){const eventType=e.type,wasHovering=(null===(_a=this._hoveredFeatures)||void 0===_a?void 0:_a.length)>0,features=this._queryRenderedFeatures(e.point),isHovering=features.length>0;!isHovering&&wasHovering&&(e.type="mouseleave",this._onPointerEvent(e)),this._hoveredFeatures=features,isHovering&&!wasHovering&&(e.type="mouseenter",this._onPointerEvent(e)),e.type=eventType}else this._hoveredFeatures=null}_fireEvent(baseFire,event,properties){const map=this._map,tr=map.transform,eventType="string"==typeof event?event:event.type;return"move"===eventType&&this._updateViewState(this.props,!1),eventType in cameraEvents&&("object"==typeof event&&(event.viewState=transformToViewState(tr)),this._map.isMoving())?(map.transform=this._renderTransform,baseFire.call(map,event,properties),map.transform=tr,map):(baseFire.call(map,event,properties),map)}_onBeforeRepaint(){const map=this._map;this._internalUpdate=!0;for(const eventType in this._deferredEvents)this._deferredEvents[eventType]&&map.fire(eventType);this._internalUpdate=!1;const tr=this._map.transform;this._map.transform=this._renderTransform,this._onAfterRepaint=()=>{this._map.transform=tr}}}function getAccessTokenFromEnv(){let accessToken=null;if("undefined"!=typeof location){const match=/access_token=([^&\/]*)/.exec(location.search);accessToken=match&&match[1]}try{accessToken=accessToken||process.env.MapboxAccessToken}catch(_a){}try{accessToken=accessToken||process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}catch(_b){}return accessToken}Mapbox.savedMaps=[];const skipMethods=["setMaxBounds","setMinZoom","setMaxZoom","setMinPitch","setMaxPitch","setRenderWorldCopies","setProjection","setStyle","addSource","removeSource","addLayer","removeLayer","setLayerZoomRange","setFilter","setPaintProperty","setLayoutProperty","setLight","setTerrain","setFog","remove"];function createRef(mapInstance,mapLib){if(!mapInstance)return null;const map=mapInstance.map,result={getMap:()=>map,getCenter:()=>mapInstance.transform.center,getZoom:()=>mapInstance.transform.zoom,getBearing:()=>mapInstance.transform.bearing,getPitch:()=>mapInstance.transform.pitch,getPadding:()=>mapInstance.transform.padding,getBounds:()=>mapInstance.transform.getBounds(),project:lnglat=>mapInstance.transform.locationPoint(mapLib.LngLat.convert(lnglat)),unproject:point=>mapInstance.transform.pointLocation(mapLib.Point.convert(point)),queryTerrainElevation:(lnglat,options)=>{const tr=map.transform;map.transform=mapInstance.transform;const result=map.queryTerrainElevation(lnglat,options);return map.transform=tr,result}};for(const key of function getMethodNames(obj){const result=new Set;let proto=obj;for(;proto;){for(const key of Object.getOwnPropertyNames(proto))"_"!==key[0]&&"function"==typeof obj[key]&&"fire"!==key&&"setEventedParent"!==key&&result.add(key);proto=Object.getPrototypeOf(proto)}return Array.from(result)}(map))key in result||skipMethods.includes(key)||(result[key]=map[key].bind(map));return result}const use_isomorphic_layout_effect="undefined"!=typeof document?react.useLayoutEffect:react.useEffect;var console=__webpack_require__("./node_modules/console-browserify/index.js");const globalSettings=["baseApiUrl","maxParallelImageRequests","workerClass","workerCount","workerUrl"];var map_console=__webpack_require__("./node_modules/console-browserify/index.js");const map_MapContext=react.createContext(null),defaultProps={minZoom:0,maxZoom:22,minPitch:0,maxPitch:60,scrollZoom:!0,boxZoom:!0,dragRotate:!0,dragPan:!0,keyboard:!0,doubleClickZoom:!0,touchZoomRotate:!0,touchPitch:!0,mapStyle:{version:8,sources:{},layers:[]},styleDiffing:!0,projection:"mercator",renderWorldCopies:!0,onError:e=>map_console.error(e.error),RTLTextPlugin:"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js"},Map=(0,react.forwardRef)(((props,ref)=>{const mountedMapsContext=(0,react.useContext)(MountedMapsContext),[mapInstance,setMapInstance]=(0,react.useState)(null),containerRef=(0,react.useRef)(),{current:contextValue}=(0,react.useRef)({mapLib:null,map:null});(0,react.useEffect)((()=>{const mapLib=props.mapLib;let mapbox,isMounted=!0;return Promise.resolve(mapLib||__webpack_require__.e(6158).then(__webpack_require__.t.bind(__webpack_require__,"./node_modules/mapbox-gl/dist/mapbox-gl.js",23))).then((mapboxgl=>{if(isMounted){if(mapboxgl.Map||(mapboxgl=mapboxgl.default),!mapboxgl||!mapboxgl.Map)throw new Error("Invalid mapLib");if(function setGlobals(mapLib,props){for(const key of globalSettings)key in props&&(mapLib[key]=props[key]);props.RTLTextPlugin&&mapLib.getRTLTextPluginStatus&&"unavailable"===mapLib.getRTLTextPluginStatus()&&mapLib.setRTLTextPlugin(props.RTLTextPlugin,(error=>{error&&console.error(error)}),!1)}(mapboxgl,props),mapboxgl.supported&&!mapboxgl.supported(props))throw new Error("Map is not supported by this browser");props.reuseMaps&&(mapbox=Mapbox.reuse(props,containerRef.current)),mapbox||(mapbox=new Mapbox(mapboxgl.Map,props,containerRef.current)),contextValue.map=createRef(mapbox,mapboxgl),contextValue.mapLib=mapboxgl,setMapInstance(mapbox),null==mountedMapsContext||mountedMapsContext.onMapMount(contextValue.map,props.id)}})).catch((error=>{props.onError({type:"error",target:null,originalEvent:null,error})})),()=>{isMounted=!1,mapbox&&(null==mountedMapsContext||mountedMapsContext.onMapUnmount(props.id),props.reuseMaps?mapbox.recycle():mapbox.destroy())}}),[]),use_isomorphic_layout_effect((()=>{mapInstance&&mapInstance.setProps(props)})),(0,react.useImperativeHandle)(ref,(()=>contextValue.map),[mapInstance]);const style=(0,react.useMemo)((()=>({position:"relative",width:"100%",height:"100%",...props.style})),[props.style]);return react.createElement("div",{id:props.id,ref:containerRef,style},mapInstance&&react.createElement(map_MapContext.Provider,{value:contextValue},react.createElement("div",{"mapboxgl-children":"",style:{height:"100%"}},props.children)))}));Map.displayName="Map",Map.defaultProps=defaultProps;const map=Map;var react_dom=__webpack_require__("./node_modules/react-dom/index.js");const unitlessNumber=/box|flex|grid|column|lineHeight|fontWeight|opacity|order|tabSize|zIndex/;function applyReactStyle(element,styles){if(!element||!styles)return;const style=element.style;for(const key in styles){const value=styles[key];Number.isFinite(value)&&!unitlessNumber.test(key)?style[key]=`${value}px`:style[key]=value}}function Marker(props){const{map,mapLib}=(0,react.useContext)(map_MapContext),thisRef=(0,react.useRef)({props});thisRef.current.props=props;const marker=(0,react.useMemo)((()=>{let hasChildren=!1;react.Children.forEach(props.children,(el=>{el&&(hasChildren=!0)}));const options={...props,element:hasChildren?document.createElement("div"):null},mk=new mapLib.Marker(options).setLngLat([props.longitude,props.latitude]);return mk.getElement().addEventListener("click",(e=>{var _a,_b;null===(_b=(_a=thisRef.current.props).onClick)||void 0===_b||_b.call(_a,{type:"click",target:mk,originalEvent:e})})),mk.on("dragstart",(e=>{var _a,_b;const evt=e;evt.lngLat=marker.getLngLat(),null===(_b=(_a=thisRef.current.props).onDragStart)||void 0===_b||_b.call(_a,evt)})),mk.on("drag",(e=>{var _a,_b;const evt=e;evt.lngLat=marker.getLngLat(),null===(_b=(_a=thisRef.current.props).onDrag)||void 0===_b||_b.call(_a,evt)})),mk.on("dragend",(e=>{var _a,_b;const evt=e;evt.lngLat=marker.getLngLat(),null===(_b=(_a=thisRef.current.props).onDragEnd)||void 0===_b||_b.call(_a,evt)})),mk}),[]);return(0,react.useEffect)((()=>(marker.addTo(map.getMap()),()=>{marker.remove()})),[]),(0,react.useEffect)((()=>{applyReactStyle(marker.getElement(),props.style)}),[props.style]),marker.getLngLat().lng===props.longitude&&marker.getLngLat().lat===props.latitude||marker.setLngLat([props.longitude,props.latitude]),props.offset&&!function arePointsEqual(a,b){const ax=Array.isArray(a)?a[0]:a?a.x:0,ay=Array.isArray(a)?a[1]:a?a.y:0,bx=Array.isArray(b)?b[0]:b?b.x:0,by=Array.isArray(b)?b[1]:b?b.y:0;return ax===bx&&ay===by}(marker.getOffset(),props.offset)&&marker.setOffset(props.offset),marker.isDraggable()!==props.draggable&&marker.setDraggable(props.draggable),marker.getRotation()!==props.rotation&&marker.setRotation(props.rotation),marker.getRotationAlignment()!==props.rotationAlignment&&marker.setRotationAlignment(props.rotationAlignment),marker.getPitchAlignment()!==props.pitchAlignment&&marker.setPitchAlignment(props.pitchAlignment),marker.getPopup()!==props.popup&&marker.setPopup(props.popup),(0,react_dom.createPortal)(props.children,marker.getElement())}Marker.defaultProps={draggable:!1,popup:null,rotation:0,rotationAlignment:"auto",pitchAlignment:"auto"};const marker=react.memo(Marker);function getClassList(className){return new Set(className?className.trim().split(/\s+/):[])}const popup=react.memo((function Popup(props){const{map,mapLib}=(0,react.useContext)(map_MapContext),container=(0,react.useMemo)((()=>document.createElement("div")),[]),thisRef=(0,react.useRef)({props});thisRef.current.props=props;const popup=(0,react.useMemo)((()=>{const options={...props},pp=new mapLib.Popup(options).setLngLat([props.longitude,props.latitude]);return pp.once("open",(e=>{var _a,_b;null===(_b=(_a=thisRef.current.props).onOpen)||void 0===_b||_b.call(_a,e)})),pp}),[]);if((0,react.useEffect)((()=>{const onClose=e=>{var _a,_b;null===(_b=(_a=thisRef.current.props).onClose)||void 0===_b||_b.call(_a,e)};return popup.on("close",onClose),popup.setDOMContent(container).addTo(map.getMap()),()=>{popup.off("close",onClose),popup.isOpen()&&popup.remove()}}),[]),(0,react.useEffect)((()=>{applyReactStyle(popup.getElement(),props.style)}),[props.style]),popup.isOpen()&&(popup.getLngLat().lng===props.longitude&&popup.getLngLat().lat===props.latitude||popup.setLngLat([props.longitude,props.latitude]),props.offset&&!deep_equal_deepEqual(popup.options.offset,props.offset)&&popup.setOffset(props.offset),popup.options.anchor===props.anchor&&popup.options.maxWidth===props.maxWidth||(popup.options.anchor=props.anchor,popup.setMaxWidth(props.maxWidth)),popup.options.className!==props.className)){const prevClassList=getClassList(popup.options.className),nextClassList=getClassList(props.className);for(const c of prevClassList)nextClassList.has(c)||popup.removeClassName(c);for(const c of nextClassList)prevClassList.has(c)||popup.addClassName(c);popup.options.className=props.className}return(0,react_dom.createPortal)(props.children,container)}));const use_control=function useControl(onCreate,arg1,arg2,arg3){const context=(0,react.useContext)(map_MapContext),ctrl=(0,react.useMemo)((()=>onCreate(context)),[]);return(0,react.useEffect)((()=>{const opts=arg3||arg2||arg1,onAdd="function"==typeof arg1&&"function"==typeof arg2?arg1:null,onRemove="function"==typeof arg2?arg2:"function"==typeof arg1?arg1:null,{map}=context;return map.hasControl(ctrl)||(map.addControl(ctrl,null==opts?void 0:opts.position),onAdd&&onAdd(context)),()=>{onRemove&&onRemove(context),map.hasControl(ctrl)&&map.removeControl(ctrl)}}),[]),ctrl};react.memo((function AttributionControl(props){const ctrl=use_control((({mapLib})=>new mapLib.AttributionControl(props)),{position:props.position});return(0,react.useEffect)((()=>{applyReactStyle(ctrl._container,props.style)}),[props.style]),null}));react.memo((function FullscreenControl(props){const ctrl=use_control((({mapLib})=>new mapLib.FullscreenControl({container:props.containerId&&document.getElementById(props.containerId)})),{position:props.position});return(0,react.useEffect)((()=>{applyReactStyle(ctrl._controlContainer,props.style)}),[props.style]),null}));const GeolocateControl=(0,react.forwardRef)(((props,ref)=>{const thisRef=(0,react.useRef)({props}),ctrl=use_control((({mapLib})=>{const gc=new mapLib.GeolocateControl(props),setupUI=gc._setupUI;return gc._setupUI=args=>{gc._container.hasChildNodes()||setupUI(args)},gc.on("geolocate",(e=>{var _a,_b;null===(_b=(_a=thisRef.current.props).onGeolocate)||void 0===_b||_b.call(_a,e)})),gc.on("error",(e=>{var _a,_b;null===(_b=(_a=thisRef.current.props).onError)||void 0===_b||_b.call(_a,e)})),gc.on("outofmaxbounds",(e=>{var _a,_b;null===(_b=(_a=thisRef.current.props).onOutOfMaxBounds)||void 0===_b||_b.call(_a,e)})),gc.on("trackuserlocationstart",(e=>{var _a,_b;null===(_b=(_a=thisRef.current.props).onTrackUserLocationStart)||void 0===_b||_b.call(_a,e)})),gc.on("trackuserlocationend",(e=>{var _a,_b;null===(_b=(_a=thisRef.current.props).onTrackUserLocationEnd)||void 0===_b||_b.call(_a,e)})),gc}),{position:props.position});return thisRef.current.props=props,(0,react.useImperativeHandle)(ref,(()=>({trigger:()=>ctrl.trigger()})),[]),(0,react.useEffect)((()=>{applyReactStyle(ctrl._container,props.style)}),[props.style]),null}));GeolocateControl.displayName="GeolocateControl";react.memo(GeolocateControl);react.memo((function NavigationControl(props){const ctrl=use_control((({mapLib})=>new mapLib.NavigationControl(props)),{position:props.position});return(0,react.useEffect)((()=>{applyReactStyle(ctrl._container,props.style)}),[props.style]),null}));function ScaleControl(props){const ctrl=use_control((({mapLib})=>new mapLib.ScaleControl(props)),{position:props.position});return ctrl.options.unit===props.unit&&ctrl.options.maxWidth===props.maxWidth||(ctrl.options.maxWidth=props.maxWidth,ctrl.setUnit(props.unit)),(0,react.useEffect)((()=>{applyReactStyle(ctrl._container,props.style)}),[props.style]),null}ScaleControl.defaultProps={unit:"metric",maxWidth:100};react.memo(ScaleControl);__webpack_require__("./node_modules/console-browserify/index.js");__webpack_require__("./node_modules/console-browserify/index.js")}}]);